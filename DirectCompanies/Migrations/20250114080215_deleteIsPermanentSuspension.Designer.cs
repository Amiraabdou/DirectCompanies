// <auto-generated />
using System;
using DirectCompanies.Services;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DirectCompanies.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250114080215_deleteIsPermanentSuspension")]
    partial class deleteIsPermanentSuspension
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("DirectCompanies.Models.ApplicationUser", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CompanyName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("DirectCompanies.Models.BeneficiaryType", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ValueAr")
                        .HasColumnType("TEXT");

                    b.Property<string>("ValueEn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BeneficiaryTypes");
                });

            modelBuilder.Entity("DirectCompanies.Models.Employee", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("BeneficiaryTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("IDCardNo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsTemporarySuspension")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("MedicalContractClassId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MedicalCustomerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SuspendFromDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SuspendToDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BeneficiaryTypeId");

                    b.HasIndex("MedicalContractClassId");

                    b.HasIndex("MedicalCustomerId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("DirectCompanies.Models.MedicalContractClass", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ValueAr")
                        .HasColumnType("TEXT");

                    b.Property<string>("ValueEn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MedicalContractClasss");
                });

            modelBuilder.Entity("DirectCompanies.Models.OutBoxEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("EntityId")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EventData")
                        .HasColumnType("TEXT");

                    b.Property<int>("EventType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSent")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("OutBoxEvents");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<decimal>", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<decimal>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<decimal>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<decimal>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<decimal>", b =>
                {
                    b.Property<decimal>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<decimal>", b =>
                {
                    b.Property<decimal>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DirectCompanies.Models.Employee", b =>
                {
                    b.HasOne("DirectCompanies.Models.BeneficiaryType", "BeneficiaryType")
                        .WithMany("Employees")
                        .HasForeignKey("BeneficiaryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DirectCompanies.Models.MedicalContractClass", "MedicalContractClass")
                        .WithMany("Employees")
                        .HasForeignKey("MedicalContractClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DirectCompanies.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Employees")
                        .HasForeignKey("MedicalCustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("BeneficiaryType");

                    b.Navigation("MedicalContractClass");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<decimal>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<decimal>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<decimal>", b =>
                {
                    b.HasOne("DirectCompanies.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<decimal>", b =>
                {
                    b.HasOne("DirectCompanies.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<decimal>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<decimal>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DirectCompanies.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<decimal>", b =>
                {
                    b.HasOne("DirectCompanies.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DirectCompanies.Models.ApplicationUser", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("DirectCompanies.Models.BeneficiaryType", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("DirectCompanies.Models.MedicalContractClass", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
