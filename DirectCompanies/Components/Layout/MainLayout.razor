@inherits LayoutComponentBase
@using System.Globalization
@using DirectCompanies.Components.Pages
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpContextAccessor HttpContextAccessor

<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">



        <HeaderComponent></HeaderComponent>
<div class="page">
    <div class="wrapper m-0 mt-5 pt-2 d-flex align-items-stretch">
        <main class="position-relative min-vh-100">
            <div class="content px-3 py-2 mb-3">
                <div class="pb-4 pt-3">
                    <CzAlert @ref="_alert">
                        @Body
                    </CzAlert>
                </div>
            </div>
        </main>
    </div>
</div>
   


<div id="blazor-error-ui" class="d-none">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

<!-- Global Styles for Layout -->
<style>
    /* Basic Reset */
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    /* Ensure the page occupies full height */
    .page {
        min-height: 100vh;
        display: flex;
        flex-direction: column;
    }

    /* Wrapper for main content and sidebar (if present) */
    .wrapper {
        display: flex;
        height: 100%;
        flex-grow: 1;
    }

    /* Sidebar Styles (if you use it) */
    .sidebar {
        width: 250px;
        background-color: #333;
        color: white;
        height: 100%;
        padding-top: 20px;
        position: sticky;
        top: 0;
    }

    /* Sidebar Navigation */
    .nav {
        list-style-type: none;
    }

    .nav-item {
        margin-bottom: 10px;
    }

    .nav-link {
        color: white;
        font-size: 16px;
        text-decoration: none;
        display: block;
        padding: 8px;
        border-radius: 5px;
    }

    .nav-link:hover {
        background-color: #555;
    }

    /* Main Content Styles */
    main {
        background-color: #f9f9f9;
        flex-grow: 1;
        padding-top: 20px;
        padding-bottom: 20px;
    }

    .content {
        max-width: 1200px;
        margin: 0 auto;
        background-color: white;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        border-radius: 8px;
        padding: 20px;
    }

    /* Footer */
    footer {
        background-color: #333;
        color: white;
        text-align: center;
        padding: 15px;
        margin-top: auto;
    }

    /* Error UI */
    #blazor-error-ui {
        position: fixed;
        bottom: 20px;
        left: 50%;
        transform: translateX(-50%);
        background-color: #ff0000;
        color: white;
        padding: 10px 20px;
        border-radius: 5px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    #blazor-error-ui .reload,
    #blazor-error-ui .dismiss {
        color: white;
        text-decoration: none;
        padding: 5px;
        border-radius: 50%;
        font-weight: bold;
    }

    #blazor-error-ui .reload:hover,
    #blazor-error-ui .dismiss:hover {
        background-color: #fff;
        color: #000;
    }

    /* Styling for sidebar and content layout without media queries */
    .wrapper {
        flex-direction: row; /* Keeps the layout side by side for large screens */
    }

    .sidebar {
        width: 250px; /* Fixed width for sidebar */
        flex-shrink: 0; /* Prevents shrinking of the sidebar */
    }

    main {
        padding-left: 20px;
        padding-right: 20px;
        flex-grow: 1; /* Allow main content to grow and take up remaining space */
    }

    .container-fluid {
        padding: 20px;
    }

    .button-container {
        display: flex;
        justify-content: flex-end;
        margin-bottom: 20px;
    }

    .add-employee-btn {
        background-color: #333;
        border-color: #333;
        color: #fff;
        padding: 10px 16px;
        font-size: 14px;
        border-radius: 5px;
        transition: background-color 0.3s;
    }

        .add-employee-btn:hover {
            background-color: #555;
            border-color: #555;
        }

    .search-container {
        margin-top: 30px;
        display: flex;
        justify-content: center;
    }

    .search-width {
        width: 100%;
        max-width: 500px;
    }


    .input-group {
        display: flex;
        align-items: center;
    }


    .input-group-text {
        background-color: #ddd;
        border-radius: 5px 0 0 5px;
        color: #333;
    }

    .form-control {
        border-radius: 0 5px 5px 0;
    }

    .table {
        width: 100%;
        margin-top: 20px;
        border-collapse: collapse;
        background-color: white;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        border-radius: 8px;
    }

    th, td {
        padding: 12px;
        text-align: left;
        border: 1px solid #ddd;
    }

    th {
        background-color: #f2f2f2;
        color: #333;
        font-weight: bold;
    }

    tr:nth-child(even) {
        background-color: #f9f9f9;
    }

    tr:hover {
        background-color: #f1f1f1;
    }

    td button {
        border: none;
        padding: 6px 12px;
        font-size: 14px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

        td button.btn-info {
            background-color: #007bff;
            color: #fff;
        }

            td button.btn-info:hover {
                background-color: #0056b3;
            }

</style>

@code {
    private CzAlert _alert;
    private bool isAuthenticated = false;
    private bool hasRedirected = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
       var cookieValue = HttpContextAccessor.HttpContext?.Request?.Cookies["UserName"];


        if (user?.Identity?.IsAuthenticated == false && string.IsNullOrEmpty(cookieValue))
        {
            if (Navigation.Uri != Navigation.ToAbsoluteUri("/login").ToString()) 
            {
                Navigation.NavigateTo("/login");
            }
        }
        else
        {
            isAuthenticated = true;  
        }
    }
}







