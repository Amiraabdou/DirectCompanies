@page "/Login"
@inject NavigationManager Navigation
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject IJSRuntime JSRuntime


<PageTitle>Login</PageTitle>

<style>
    html, body {
        margin: 0;
        padding: 0;
        height: 100%;
        overflow: hidden;
    }

    .centered-form {
        display: flex;
        justify-content: center;
        align-items: flex-start;
        height: 100%;
        background-color: #f8f9fa;
        padding-top: 50px;
    }

    .login-box {
        width: 300px;
        padding: 20px;
        background: #ffffff;
        border: 1px solid #ddd;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .form-group {
        margin-bottom: 15px;
    }
</style>
<div class="centered-form">
    <EditForm Model="@loginModel" OnValidSubmit="HandleValidSubmit" class="login-box">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="username">@Localization.Localizer.GetUi("Username")</label>
            <InputText id="username" class="form-control" @bind-Value="loginModel.Username" required />
        </div>

        <div class="form-group">
            <label for="password">@Localization.Localizer.GetUi("Password")</label>
            <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" required />
        </div>

        <div class="form-group">
            <button type="submit" class="btn btn-primary">@Localization.Localizer.GetUi("Login")</button>
        </div>

        @if (loginError != null)
        {
            <div class="alert alert-danger">
                @loginError
            </div>
        }
    </EditForm>
</div>

@code {
    private LoginDto loginModel = new();
    private string? loginError;
    private async Task HandleValidSubmit()
    {
        var user = await UserManager.FindByNameAsync(loginModel.Username);

        if (user == null)
        {
            loginError = Localization.Localizer.GetString("InvalidLoginData");
            return;
        }

        try
        {
            var result = await SignInManager.CheckPasswordSignInAsync(user, loginModel.Password, false);

            if (result.Succeeded)
            {
                loginError = null;  
                var RedirectUrl=$"Login/SetLoginCookies?UserName={user.UserName}";
                Navigation.NavigateTo(RedirectUrl, forceLoad: true);
            }
            else
            {
                loginError = Localization.Localizer.GetString("InvalidLoginData");
            }
        }
        catch (Exception ex)
        {
            loginError = Localization.Localizer.GetString("LoginError");

        }
    }
}
