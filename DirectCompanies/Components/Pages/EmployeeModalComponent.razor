@inject DirectCompanies.Services.IEmployeeService IEmployeeService
@inject DirectCompanies.Services.ISetupKeyValueService ISetupKeyValueService
@inject IHttpContextAccessor HttpContextAccessor
@inject UserManager<ApplicationUser> UserManager

    @inject DirectCompanies.Services.IOutBoxEventService IOutBoxEventService


<div class="modal Show" tabindex="-1" role="dialog" style="display:block">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            
                <EditForm Model="@EmployeeDto" OnValidSubmit="Save">
                    <DataAnnotationsValidator />

            <div class="modal-body">
                <div class="form-group">
                        <label>@Localization.Localizer.GetUi("Name")</label>

                    <InputText  class="form-control" name="name" @bind-Value="@EmployeeDto.Name" />
                        <ValidationMessage For="@(() => EmployeeDto.Name)" />

                </div>
                <div class="form-group">
                        <label>@Localization.Localizer.GetUi("IDCardNo")</label>
                        <InputText class="form-control" name="name" @bind-Value="@EmployeeDto.IDCardNo" />
                        <ValidationMessage For="@(() => EmployeeDto.IDCardNo)" />

                    </div>
                    <div class="form-group">
                        <label>@Localization.Localizer.GetUi("PhoneNumber")</label>

                        <InputText class="form-control" name="name" @bind-Value="@EmployeeDto.PhoneNumber" />
                        <ValidationMessage For="@(() => EmployeeDto.PhoneNumber)" />

                    </div>
                    <div class="form-group">
                        <label>@Localization.Localizer.GetUi("Address")</label>

                        <InputText class="form-control" name="name" @bind-Value="@EmployeeDto.Address" />
                        <ValidationMessage For="@(() => EmployeeDto.Address)" />

                    </div>
                    <div class="form-group">
                        <label>@Localization.Localizer.GetUi("MedicalContractClass")</label>

                        <InputSelect class="form-control" @bind-Value="@EmployeeDto.MedicalContractClassId">
                            <option></option>
                            @foreach (var MedicalContractClass in MedicalContractClasses)
                            {
                                <option value="@MedicalContractClass.Id">@MedicalContractClass.Name</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => EmployeeDto.MedicalContractClassId)" />

                    </div>
                    <div class="form-group">
                        <label>@Localization.Localizer.GetUi("BeneficiaryType")</label>

                        <InputSelect class="form-control" @bind-Value="@EmployeeDto.BeneficiaryTypeId">
                            <option></option>
                            @foreach (var BeneficiaryType in BeneficiaryTypes)
                            {
                                <option value="@BeneficiaryType.Id">@BeneficiaryType.Name</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => EmployeeDto.BeneficiaryTypeId)" />

                    </div>
                    <div class="form-group">
                        <label>@Localization.Localizer.GetUi("IsPermanentSuspension")</label>

                        <InputCheckbox   @bind-Value="@EmployeeDto.IsPermanentSuspension" />
                        <ValidationMessage For="@(() => EmployeeDto.IsPermanentSuspension)" />
                    </div>
                    <div class="form-group">
                        <label>@Localization.Localizer.GetUi("IsTemporarySuspension")</label>

                        <InputCheckbox @bind-Value="@EmployeeDto.IsTemporarySuspension" @onclick="OnTemporarySuspensionChanged" />
                        <ValidationMessage For="@(() => EmployeeDto.IsTemporarySuspension)" />
                    </div>
                    @if (EmployeeDto.IsTemporarySuspension)
                    {
                        <div class="form-group">
                            <label>@Localization.Localizer.GetUi("SuspendFromDate")</label>

                            <InputDate class="form-control" @bind-Value="@EmployeeDto.SuspendFromDate" />

                            <ValidationMessage For="@(() => EmployeeDto.SuspendFromDate)" />
                        </div>
                        <div class="form-group">
                            <label>@Localization.Localizer.GetUi("SuspendToDate")</label>

                            <InputDate class="form-control" @bind-Value="@EmployeeDto.SuspendToDate" />

                            <ValidationMessage For="@(() => EmployeeDto.SuspendToDate)" />
                        </div>
                    }
                    <div class="form-group">
                        <label>@Localization.Localizer.GetUi("Client")</label>

                        <InputText class="form-control" name="name" @bind-Value="@EmployeeDto.CompanyName" readonly />
                    </div>

            </div>
            <div class="modal-footer">
                    <button type="submit" class="btn btn-primary">@Localization.Localizer.GetUi("Save")</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => Close()">@Localization.Localizer.GetUi("Close")</button>

            </div>
            </EditForm>
        </div>
    </div>
</div>


@code {


    [CascadingParameter]
    public Home _parent { get; set; } = new();
    public EmployeeDto? EmployeeDto { get; set; } = new();
    [Parameter]

    public decimal? EmployeeID { get; set; }


    public List<KeyValue> MedicalContractClasses { get; set; }
    public List<KeyValue> BeneficiaryTypes = new();




    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public string lang { get; set; }
    [CascadingParameter]
    public CzAlert _czAlert { get; set; }

    protected override async Task OnInitializedAsync()
    {
        lang = System.Globalization.CultureInfo.CurrentCulture.Name == "ar-EG" ? "ar" : "en";


        MedicalContractClasses = await ISetupKeyValueService.GetKeyValueList<MedicalContractClass>(lang);
        BeneficiaryTypes = await ISetupKeyValueService.GetKeyValueList<BeneficiaryType>(lang);




    }
    protected override async Task OnParametersSetAsync()
    {
        var UserName = HttpContextAccessor.HttpContext?.Request?.Cookies["UserName"];

        var user = await UserManager.FindByNameAsync(UserName);

        if (EmployeeID ==0 || EmployeeID == null)
        {
            EmployeeDto = new EmployeeDto
        {
            Id = DecimalHelper.NewID(),
            Name = string.Empty,
            Address = string.Empty,
            PhoneNumber = string.Empty,
            IDCardNo = string.Empty,
            CompanyName = user.CompanyName,
            BeneficiaryTypeName = string.Empty,
            BeneficiaryTypeId = null,
            MedicalContractClassId = null,
            MedicalContractClassName = string.Empty,
            IsPermanentSuspension=false,
            IsTemporarySuspension=false,
            SuspendFromDate=DateTime.Now,
            SuspendToDate=DateTime.Now


        };
        }
        else
        {
            EmployeeDto = await IEmployeeService.GetEmployee(EmployeeID, lang);
        }
    }
    public async void Close()
    {

        OnClose.InvokeAsync();

    }
    public async void Save()
    {
        var savemsg=await  IEmployeeService.SaveEmployee(EmployeeDto ?? new());
        if (string.IsNullOrEmpty(savemsg))
        {
            _czAlert.ShowSuccess();

        }
        else
        {
            _czAlert.ShowDanger(savemsg);
        }

        this.Close();
        _parent.Search();


    }
    private async Task OnTemporarySuspensionChanged()
    {       
        EmployeeDto.SuspendToDate = null;
        EmployeeDto.SuspendFromDate = null;

        StateHasChanged();
    }
    
}
